#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('polaroids-third:server');
var http = require('http');

const inquirer = require("inquirer");
const fs = require("fs");
const result = require('dotenv').config();

banner();

function generateEnvFile(){
  return new Promise((res, rej) => {

    // prompt user for CLIENT_ID and CLIENT_SECRET
    console.log("‚ö† No configuration file found! You're going to have to enter your Patreon API credentials.\n" +
        "Please enter your CLIENT_ID and CLIENT_SECRET below.\n" +
        "If you're confused, go back and read the README again. üìÑ\n");
    inquirer.prompt([
      {
        type: 'input',
        name: 'CLIENT_ID',
        message: 'Enter your CLIENT_ID:',
        validate: function(value) {
          if (value.length) {
            return true;
          } else {
            return 'Please enter your CLIENT_ID';
          }
        }
      },
      {
        type: 'input',
        name: 'CLIENT_SECRET',
        message: 'Enter your CLIENT_SECRET:',
        validate: function(value) {
          if (value.length) {
            return true;
          } else {
            return 'Please enter your CLIENT_SECRET';
          }
        }
      }
    ]).then(answers => {
      // write env file
      const fs = require('fs');
      const env = `CLIENT_ID="${answers.CLIENT_ID}"\nCLIENT_SECRET="${answers.CLIENT_SECRET}"`;
      fs.writeFile('.env', env, function(err) {
        if (err) {
          console.log(err);
          rej(err);
        }
        console.log('‚úÖ New .env configuration file created!');
        res();
      });
    });
  })
}

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = null;

if (result.error) {
  generateEnvFile().then(() => {
    startServer();
  }).catch(err => {
    console.log(err);
    // exit process
    process.exit(1);
  });
}else{
  startServer();
}

function startServer(){
  /**
   * Listen on provided port, on all network interfaces.
   */
  server = http.createServer(app);

  server.listen(port);
  server.on('error', onError);
  server.on('listening', onListening);
}



/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

function banner(){
  console.log(
      "\x1b[33m             _                 _     _       _   _     _         _ \n" +
      "            | |               (_)   | |     | | | |   (_)       | |\n" +
      " _ __   ___ | | __ _ _ __ ___  _  __| |___  | |_| |__  _ _ __ __| |\n" +
      "| '_ \\ / _ \\| |/ _` | '__/ _ \\| |/ _` / __| | __| '_ \\| | '__/ _` |\n" +
      "| |_) | (_) | | (_| | | | (_) | | (_| \\__ \\ | |_| | | | | | | (_| |\n" +
      "| .__/ \\___/|_|\\__,_|_|  \\___/|_|\\__,_|___/  \\__|_| |_|_|_|  \\__,_|\n" +
      "| |                                                                \n" +
      "|_|                                                                \n\n\x1b[0m"
  );
  console.log("\x1b[2m ‚ù§  A \"short\" script for the safety third podcast to figure out patreon rewards. \x1b[0m \n");
}
